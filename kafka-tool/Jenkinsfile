#!groovy

// Keep the 5 most recent builds
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '5']]])

node {
    def mvnHome

    try {
        stage('Preparation') {
            mvnHome = '/usr'
        }

        stage('Checkout') {
            checkout([
                $class: 'GitSCM',
                branches: scm.branches,
                extensions: scm.extensions + [[$class: 'CleanCheckout'], [$class: 'LocalBranch', localBranch: env.BRANCH_NAME]],
                userRemoteConfigs: scm.userRemoteConfigs
            ])
        }

        stage('Compile') {
            sh "${mvnHome}/bin/mvn process-resources"
            sh "${mvnHome}/bin/mvn clean install"
        }

        stage('Dockerize') {
            docker.withRegistry('https://690893158275.dkr.ecr.us-east-2.amazonaws.com', 'ecr:us-east-2:jenkins_for_k8') {
                def image = docker.build("kafkatool", ".")
                image.push("latest")
            }
        }

        stage('Deploy') {
            sh """
            kubectl config use-context stage
            kubectl -n default scale --replicas=0 deployment kafkatool
            kubectl -n default scale --replicas=1 deployment kafkatool
            """
        }
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
    }
}